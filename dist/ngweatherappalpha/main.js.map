{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/country-api.service.ts","webpack:///./src/app/country-info/country-info.component.css","webpack:///./src/app/country-info/country-info.component.html","webpack:///./src/app/country-info/country-info.component.ts","webpack:///./src/app/roadmap-overview/roadmap-overview.component.css","webpack:///./src/app/roadmap-overview/roadmap-overview.component.html","webpack:///./src/app/roadmap-overview/roadmap-overview.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \".danger {\\r\\n    color: red;\\r\\n}\\r\\n\\r\\n* {\\r\\n  font-family: \\\"Roboto Mono\\\", monospace;\\r\\n}\\r\\n\\r\\nh1 {\\r\\n  margin: 0 auto;\\r\\n}\\r\\n\\r\\n.searchbar__maxwidth {\\r\\n  width: 80%;\\r\\n  margin: 0.6em;\\r\\n}\\r\\n\\r\\n.social-signin {\\r\\n  float: right !important;\\r\\n  margin: 0; \\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n.row {\\r\\n  margin: 0 0 0 58%;\\r\\n}\\r\\n\\r\\n@media screen and (max-width: 600px) {\\r\\n  .searchbar__maxwidth {\\r\\n    width: 95%;\\r\\n    margin: 0.6em;\\r\\n  }\\r\\n  mat-expansion-panel {\\r\\n    display: block !important;\\r\\n  }\\r\\n  .header {\\r\\n    font-size: small;\\r\\n  }\\r\\n  .row {\\r\\n    margin: 0 0 0 15%;\\r\\n  }\\r\\n}\\r\\n\"","module.exports = \"<mat-toolbar>\\n  <mat-toolbar-row>\\n    <span class=\\\"header\\\">Search for {{ countryName || 'country' }}</span>\\n\\n    <!-- View Roadmap -->\\n    <div class=\\\"row\\\">\\n      <button mat-raised-button (click)=\\\"openDialog()\\\">Roadmap</button>\\n    </div>\\n\\n\\n  </mat-toolbar-row>\\n\\n  <!-- <mat-toolbar-row>\\n    <div class='social-signin'>\\n      <div class=\\\"g-signin2\\\" data-onsuccess=\\\"onSignIn\\\" *ngIf=\\\"!validUser\\\"></div>\\n      <a href='#' onclick='signOut();'>Sign out</a>\\n    </div>\\n  </mat-toolbar-row> -->\\n</mat-toolbar>\\n\\n<mat-form-field class='searchbar__maxwidth' [hideRequiredMarker]='options.value.hideRequired'\\n  [floatLabel]='options.value.floatLabel'>\\n  <input matInput placeholder='Enter a country name' required autofocus [(ngModel)]='countryName'\\n    (keyup.enter)='searchCountry()' #countryInput />\\n  <mat-progress-spinner mode='indeterminate' [diameter]=20 class='float-right' *ngIf='isLoading' matSuffix>\\n  </mat-progress-spinner>\\n</mat-form-field>\\n\\n\\n<app-country-info [countryList]='countryList' [isLoading]='isLoading'></app-country-info>\"","import { Component } from '@angular/core';\nimport { FormControl, FormBuilder, FormGroup } from '@angular/forms';\nimport { CountryAPIService } from './country-api.service';\nimport { MatIconRegistry, MatSnackBar, MatDialog, MatDialogRef } from '@angular/material';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { RoadmapOverviewComponent } from './roadmap-overview/roadmap-overview.component';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  options: FormGroup;\n  countryName: String;\n  isLoading = 0;\n  countryList = [];\n\n  // tslint:disable-next-line:max-line-length\n  constructor(private fb: FormBuilder, private API: CountryAPIService, iconRegistry: MatIconRegistry, sanitizer: DomSanitizer, private snackBar: MatSnackBar, public dialog: MatDialog) {\n    console.log('Init');\n    this.options = fb.group({\n      hideRequired: false,\n      floatLabel: 'auto',\n    });\n  }\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(RoadmapOverviewComponent, {\n      width: '45em',\n      height: '25em'\n    });\n  }\n\n  searchCountry() {\n    if (this.countryName === '' || !this.countryName) { this.openSnackBar('Please enter a country name', 'Okay'); return; }\n    this.countryList = [];\n    this.isLoading = 1;\n    console.log(this.API.getCountryByName(this.countryName));\n\n    this.API.getCountryByName(this.countryName).subscribe((res: any) => {\n      console.log(res);\n      this.countryList = res;\n      this.isLoading = 0;\n      this.openSnackBar(`${this.countryList.length} countries found`, 'Dismiss');\n    }, (err) => {\n      this.isLoading = 0;\n      this.openSnackBar(`Cannot find country ${this.countryName}`, 'Dismiss');\n      console.error(err);\n    });\n  }\n\n  async openSnackBar(message: string, action: string) {\n    this.snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n// import { CustomComponentComponent } from './custom-component/custom-component.component';\n\n// import { SocialLoginModule, AuthServiceConfig, GoogleLoginProvider, FacebookLoginProvider } from 'angular4-social-login';\n\n// ngx-material component library - https://material.angular.io/guide/getting-started\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  MatButtonModule,\n  MatCheckboxModule,\n  MatAutocompleteModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatIconModule,\n  MatProgressSpinnerModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatSnackBarModule,\n  MatTableModule,\n  MatDialogModule\n} from '@angular/material';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { CountryInfoComponent } from './country-info/country-info.component';\nimport { RoadmapOverviewComponent } from './roadmap-overview/roadmap-overview.component';\n\n// const config = new AuthServiceConfig([\n//   {\n//     id: 'Ke9XCD1EWoK7MW3rEGgCmdGe',\n//     provider: new GoogleLoginProvider('260121249713-ilvng8rj1bjgfj36k49lclq2th4ecoc4.apps.googleusercontent.com')\n//   }\n//   ]);\n\n@NgModule({\n  declarations: [AppComponent, CountryInfoComponent, RoadmapOverviewComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatCardModule,\n    MatAutocompleteModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatToolbarModule,\n    MatIconModule,\n    HttpClientModule,\n    MatProgressSpinnerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatSnackBarModule,\n    MatTableModule,\n    MatDialogModule\n    // SocialLoginModule.initialize(config)\n  ],\n  entryComponents: [\n    RoadmapOverviewComponent\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  exports: [MatButtonModule, MatCheckboxModule]\n})\nexport class AppModule {\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountryAPIService {\n  BASEURL = 'https://restcountries.eu/rest/v2';\n  constructor(private http: HttpClient) {}\n\n  getCountryByName(name) {\n    console.log('Searching for ', name);\n    return this.http.get(`${this.BASEURL}/name/${name}`);\n  }\n}\n","module.exports = \"\\r\\n@media screen and (max-width: 480px) {\\r\\n  #main { background-image: url('world_bg_medium.svg');}\\r\\n}\\r\\n\\r\\n@media screen and (max-width: 280px) {\\r\\n  #main { background-image: url('world_bg_small.svg');}\\r\\n}\\r\\n\\r\\n#main {\\r\\n    background-image: url('world_bg.svg');\\r\\n    background-repeat: repeat-y;\\r\\n    background-attachment: fixed;\\r\\n    -webkit-backdrop-filter: blur(3px);\\r\\n            backdrop-filter: blur(3px);\\r\\n    width: 100%;\\r\\n    height: 75vh;\\r\\n    background-origin: content-box;\\r\\n  }\\r\\n\\r\\n.country-card {\\r\\n    max-width: 400px;\\r\\n  }\\r\\n\\r\\n.country-header-image {\\r\\n    background-size: cover;\\r\\n  }\\r\\n\\r\\n#country-info {\\r\\n    width: 40%;\\r\\n    float: left;\\r\\n    margin: 1em;\\r\\n    min-height: 4em;\\r\\n    \\r\\n  }\\r\\n\\r\\n.country-name {\\r\\n    margin: 0.9em 0 0 1em;\\r\\n    vertical-align: middle;\\r\\n    text-overflow: ellipsis;\\r\\n    display: block;\\r\\n    clear: both;\\r\\n  }\\r\\n\\r\\n.country-capital {\\r\\n      margin: 1.4em 0 0 0.5em;\\r\\n      text-overflow: ellipsis;\\r\\n      display: block;\\r\\n      font-size: smaller;\\r\\n      color: darkgrey;\\r\\n  }\\r\\n\\r\\n.country-bookmark {\\r\\n      margin: 0 0 0 0;\\r\\n      float: right;\\r\\n      cursor: pointer;\\r\\n  }\\r\\n\\r\\n.country-image {\\r\\n      margin: 0.6em  0 0 0;\\r\\n    border-radius: 50%;\\r\\n    border: 0.2em solid rgba(0, 0, 0, 0.15);\\r\\n  }\\r\\n\\r\\n.metadata-flag {\\r\\n      margin: 1em 0 0 1.5em;\\r\\n      float: left;\\r\\n      cursor: pointer;\\r\\n  }\\r\\n\\r\\n.metadata-content {\\r\\n      margin: 2em 0 0 1.5em;\\r\\n      clear: both;\\r\\n      display: -ms-grid;\\r\\n      display: grid;\\r\\n      -ms-grid-columns: auto auto auto;\\r\\n          grid-template-columns: auto auto auto;\\r\\n  }\\r\\n\\r\\n.content-items {\\r\\n      margin: 0.5em 0 0 0;\\r\\n      display: inline-block;\\r\\n  }\\r\\n\\r\\n.heading {\\r\\n      font-weight: bold;\\r\\n      text-align: right;\\r\\n  }\\r\\n\\r\\n@media only screen and (max-width: 482px) {\\r\\n    .country-image {\\r\\n      border-radius: 50%;\\r\\n    }\\r\\n  \\r\\n    .country-name {\\r\\n      font-size: smaller;\\r\\n    }\\r\\n  }\\r\\n\\r\\n@media only screen and (max-width: 682px) {\\r\\n    .country-image {\\r\\n      border-radius: 50%;\\r\\n    }\\r\\n    body {\\r\\n      font-size: small;\\r\\n    }\\r\\n    \\r\\n    #country-info {\\r\\n        display: block !important;\\r\\n        width: 95%;\\r\\n    }\\r\\n  }\\r\\n  \"","module.exports = \"<div id='main'>\\n\\n  <!-- <mat-progress-spinner mode='indeterminate' [diameter]=20 *ngIf='isLoading'></mat-progress-spinner> -->\\n\\n  <div id=\\\"country-list\\\" *ngFor=\\\"let country of countryList\\\">\\n\\n    <!-- Expansion panel -->\\n    <mat-expansion-panel id=\\\"country-info\\\">\\n      <mat-expansion-panel-header>\\n        <mat-panel-title>\\n          <img [src]=\\\"country.flag\\\" [alt]=\\\"country.name\\\" class=\\\"country-image\\\" height=\\\"30vh\\\" width=\\\"30vw\\\">\\n          <span class=\\\"country-name\\\"> {{country.name}} </span> <span class=\\\"country-capital\\\"> ●\\n            {{country.capital || 'N/A'}}</span>\\n\\n        </mat-panel-title>\\n        <mat-panel-description>\\n\\n        </mat-panel-description>\\n\\n\\n      </mat-expansion-panel-header>\\n\\n      <div class=\\\"country-metadata\\\">\\n        <img [src]=\\\"country.flag\\\" [alt]=\\\"country.name\\\" class=\\\"metadata-flag\\\" height=\\\"80%\\\" width=\\\"70%\\\"\\n          (click)=\\\"openGMaps(country.name)\\\">\\n        <div class=\\\"metadata-content\\\">\\n          <table>\\n            <!-- <td class=\\\"area-icon\\\">\\n              <mat-icon>terrain</mat-icon>\\n            </td> -->\\n            <tr></tr>\\n            <td></td>\\n            <td class=\\\"heading\\\">Area •</td>\\n            <td>{{country.area}}</td>\\n\\n            <tr></tr>\\n            <td></td>\\n            <td class=\\\"heading\\\">population •</td>\\n            <td>{{country.population}}</td>\\n\\n            <tr></tr>\\n            <td></td>\\n            <td class=\\\"heading\\\">Native name •</td>\\n            <td>{{country.nativeName}}</td>\\n\\n            <tr></tr>\\n            <td></td>\\n            <td class=\\\"heading\\\">Region •</td>\\n            <td>{{country.region}}</td>\\n\\n            <tr></tr>\\n            <td></td>\\n            <td class=\\\"heading\\\">Calling Codes •</td>\\n            <td>{{country.callingCodes}}</td>\\n\\n          </table>\\n\\n          <p *ngFor=\\\"let currency of currencies\\\">\\n            <span *ngFor=\\\"let CR of currency\\\">{{CR}} - {{CR.name}} - {{CR.symbol}} </span>\\n          </p>\\n\\n        </div>\\n\\n      </div>\\n      <!-- <mat-icon (click)=\\\"isBookmarked($event)\\\" color=\\\"primary\\\" aria-label=\\\"bookmark country icon\\\" class=\\\"country-bookmark\\\">{{bookmarkIcon}}</mat-icon> -->\\n\\n    </mat-expansion-panel>\\n\\n  </div>\\n\\n\\n</div>\\n<!-- end of main div -->\"","import { Component, OnInit, Input } from '@angular/core';\nimport { MAT_GRID_LIST } from '@angular/material/grid-list/typings/grid-list-base';\n\n@Component({\n  selector: 'app-country-info',\n  templateUrl: './country-info.component.html',\n  styleUrls: ['./country-info.component.css']\n})\nexport class CountryInfoComponent implements OnInit {\n  @Input() isLoading: number;\n  @Input() countryList;\n  toggleSwitch = true;\n  bookmarkIcon = '';\n  validUser  = false;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.bookmarkIcon = 'bookmark_outline';\n  }\n\n  // tslint:disable-next-line:use-life-cycle-interface\n  ngDoCheck(): void { }\n\n  isBookmarked(ev: any) {\n    event.stopPropagation();\n    this.toggleSwitch = !this.toggleSwitch;\n    this.toggleSwitch ? this.bookmarkIcon = 'bookmark_outline' : this.bookmarkIcon = 'bookmark';\n  }\n\n  openGMaps(countryName) {\n    if (countryName.includes('(')) {\n      countryName = countryName.split('(')[0];\n    }\n    const URL = `https://www.google.com/maps/place/${countryName}`;\n    window.open(URL, '_blank');\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h1 mat-dialog-title>Roadmap</h1>\\n<div mat-dialog-content>\\n  <p>\\n    <mat-checkbox checked='true' disabled='true'>Material UI</mat-checkbox>\\n\\n  </p>\\n  <p>\\n    <mat-checkbox checked='true' disabled='true'>Improve performance</mat-checkbox>\\n  </p>\\n  <p>\\n    <mat-checkbox disabled='true'>Optimize for smaller screens</mat-checkbox>\\n  </p>\\n  <p>\\n    <mat-checkbox disabled='true'>Search from channel list</mat-checkbox>\\n  </p>\\n  <p>\\n    <mat-checkbox disabled='true'>Country facts and relevant data insights</mat-checkbox>\\n  </p>\\n  <p>\\n    <mat-checkbox disabled='true'>Game: Country Quiz</mat-checkbox>\\n  </p>\\n  <p>\\n      <mat-checkbox disabled='true'>Add PWA Support</mat-checkbox>\\n    </p>\\n\\n\\n\\n</div>\\n<div mat-dialog-actions>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material';\n\n@Component({\n  selector: 'app-roadmap-overview',\n  templateUrl: './roadmap-overview.component.html',\n  styleUrls: ['./roadmap-overview.component.css']\n})\nexport class RoadmapOverviewComponent implements OnInit {\n\n  public dialogRef: MatDialogRef<RoadmapOverviewComponent>\n  constructor() { }\n\n  ngOnInit() {\n  }\n  \n \n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}